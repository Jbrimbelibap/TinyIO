#include "spiffsutils.h"
#include "CC1101utils.h"
#include <ELECHOUSE_CC1101_SRC_DRV.h>
#include "SimpleMenuNav.h"
#include "WiFi.h"
#include <WiFiClient.h>
#include <WebServer.h>
#include <ESPmDNS.h>
#include "esp_sleep.h"
#include "esp_bt_main.h"
#include "esp_bt.h"
#include "esp_wifi.h"
#include "driver/adc.h"


#define LOOPDELAY 20
#define HIBERNATEMS 30*500
#define BUFSIZE 2048
#define REPLAYDELAY 0
// THESE VALUES WERE FOUND PRAGMATICALLY
#define RESET443 64000 //32ms
#define WAITFORSIGNAL 32 // 32 RESET CYCLES
#define MINIMUM_TRANSITIONS 32
#define MINIMUM_COPYTIME_US 16000
#define DUMP_RAW_MBPS 0.1 // as percentage of 1Mbps, us precision. (100kbps) This is mainly to dump and analyse in, ex, PulseView
#define BOUND_SAMPLES false
#define TFT_BL 10


uint16_t signal433_store[MAXSIGS][BUFSIZE];
uint16_t *signal433_current = signal433_store[0];


//!! max size is 2048 (check if there is no more than 2047 ',' in your signal. )
//Since in this project you always start by not transmitting, here we have 1000 before 399 because the original signal starts on a transmission
//Converting.sub files to this is easy, remove all text, spaces and minus signs.

//This is the code to open the charging port of a tesla, the am270 code.
//uint16_t signal_custom[] = {1500,399,377,32700,662,391,400,389,438,385,408,387,408,387,408,387,408,385,408,387,408,387,408,387,410,387,408,387,410,387,1170,419,410,385,376,815,778,415,384,811,778,811,782,425,376,797,802,799,794,797,796,797,794,797,796,401,380,799,392,407,794,801,402,365,820,403,396,789,404,395,394,393,794,407,396,397,396,791,406,415,768,787,396,409,796,801,800,403,368,423,398,393,396,791,406,395,788,407,396,791,1192,409,404,379,406,803,776,413,384,805,786,789,822,399,382,793,786,821,792,797,794,795,796,793,796,397,380,795,404,411,802,773,406,379,798,411,396,793,408,395,394,395,794,407,394,395,396,791,404,379,798,809,406,395,790,803,796,401,380,399,410,407,380,803,410,379,802,415,358,799,1202,391,400,389,436,779,806,379,418,779,810,781,784,395,410,795,802,801,798,797,794,795,792,795,798,401,382,801,388,409,792,799,402,397,788,405,396,791,404,395,394,395,792,403,380,401,410,805,378,411,802,773,408,393,794,805,802,403,380,401,420,355,418,783,416,385,818,385,408,395,1186,403,398,393,396,395,396,397,396,397,396,397,396,397,392,401,392,401,392,403,392,437,358,433,378,407,1200,383,378,411,410,777,810,413,378,803,774,805,802,403,398,791,802,797,796,795,794,795,798,799,794,401,368,817,398,379,794,807,402,379,796,409,380,831,376,411,406,379,802,413,378,407,388,807,382,391,796,805,404,379,796,805,802,403,396,395,396,397,396,795,404,395,788,403,380,801,1200,411,408,355,438,779,810,379,418,777,812,779,788,395,410,795,802,799,796,795,794,799,794,797,796,397,380,795,404,379,832,775,404,393,790,407,398,791,404,395,394,395,792,407,396,397,394,793,406,377,800,805,404,395,792,803,800,401,382,401,420,355,418,783,418,385,814,385,408,793,1194,397,388,379,438,777,806,381,416,777,812,783,784,395,410,797,802,799,796,795,794,797,798,797,794,399,370,819,402,381,796,789,394,405,812,399,384,795,390,407,382,407,796,407,396,395,396,795,404,417,770,787,394,419,792,781,790,431,384,399,386,389,420,779,414,385,782,417,406,397,1184,405,398,395,396,397,396,395,394,397,394,399,394,435,356,435,358,437,358,437,358,437,358,437,356,439,1178,415,356,437,358,833,776,403,378,831,772,799,800,403,368,815,800,799,796,797,796,797,796,795,794,397,378,795,408,393,792,801,406,415,770,391,410,811,362,407,400,393,796,411,396,393,398,793,408,395,790,799,400,377,800,805,802,405,366,425,368,423,396,791,408,395,788,407,368,817,1200,395,394,395,396,785,816,385,410,779,812,779,812,389,420,783,784,789,824,795,794,793,794,795,794,399,378,797,404,379,802,807,404,395,792,407,396,791,402,379,400,411,802,377,412,405,380,805,412,377,804,777,410,393,796,803,802,403,368,423,396,393,396,791,402,379,800,411,394,793,1200,395,396,393,398,813,770,411,418,777,808,781,788,395,416,793,784,787,826,793,796,797,794,793,794,401,368,817,404,397,784,801,402,395,788,407,396,791,402,395,394,393,794,407,396,397,396,791,404,379,830,773,404,379,830,773,802,403,398,393,396,397,396,793,406,395,788,407,396,395,1182,411,396,395,396,397,396,399,394,399,394,399,392,435,358,437,358,437,358,437,358,435,358,435,388,405,1170,415,378,409,380,807,810,377,412,801,776,805,798,401,380,797,804,801,800,799,792,795,798,795,798,401,382,799,388,407,810,795,394,377,800,407,394,793,402,379,400,411,804,379,410,407,378,805,412,377,802,809,376,411,802,775,800,405,396,395,396,397,396,795,406,395,788,407,396,791,1194,379,434,379,406,803,774,383,420,783,812,785,788,395,416,793,784,823,796,793,796,795,794,793,794,401,368,817,402,395,790,801,404,397,788,401,380,795,406,379,434,379,806,379,412,409,388,805,378,393,796,805,404,395,788,799,798,403,398,393,396,397,396,793,406,393,790,405,396,793,1194,379,434,379,408,771,810,385,418,781,812,783,820,361,410,797,800,801,798,797,794,797,792,797,792,403,414,765,390,411,794,801,400,365,820,405,398,789,404,363,426,395,794,405,396,395,394,793,404,381,830,773,406,395,792,801,800,397,380,399,412,373,414,803,412,379,802,377,412,405,1202,381,380,409,410,379,414,379,412,379,410,411,382,411,380,411,380,411,412,381,412,377,424,381,398,375,1206,409,398,395,396,783,804,381,446,775,808,779,786,393,404,781,828,763,828,761,828,793,796,767,826,399,380,795,404,379,830,773,406,393,794,405,394,791,408,395,394,393,794,409,396,395,394,795,406,393,794,801,402,377,796,805,802,405,368,421,398,395,396,789,406,393,794,407,396,791,1202,395,394,393,394,807,778,411,382,803,814,783,786,395,418,791,784,821,792,795,794,797,796,793,796,399,378,797,406,415,770,789,396,417,794,389,420,785,386,409,396,395,790,407,398,393,396,791,406,395,792,801,400,379,796,805,800,403,396,395,396,395,396,791,408,395,790,407,396,791,1194,409,374,409,406,803,772,415,382,805,786,823,758,431,384,795,784,823,792,795,794,793,796,797,794,399,376,797,406,409,800,777,404,393,792,407,396,791,404,377,404,409,802,411,380,405,378,805,412,379,804,775,408,409,804,773,800,403,380,401,412,405,378,807,416,357,834,379,396,397,1184,411,394,397,396,399,394,399,394,399,394,399,394,401,392,399,412,405,380,409,380,409,380,411,410,383,1200,415,376,413,378,807,810,383,378,805,814,777,806,405,398,789,798,799,794,797,798,797,796,795,792,403,366,817,400,379,800,807,404,395,790,403,378,797,408,409,404,379,804,411,378,409,388,803,380,391,798,809,404,397,788,801,796,401,378,399,412,405,378,805,412,379,806,379,394,799,1200,395,398,391,400,817,782,385,412,811,776,813,782,391,418,791,784,785,824,791,794,797,796,795,796,403,368,815,400,377,796,805,406,393,790,405,396,791,406,393,396,395,792,407,396,395,396,795,408,395,788,803,400,379,796,805,802,401,378,399,412,407,380,803,412,379,804,379,410,803,1206,355,436,379,406,803,778,383,418,781,810,785,822,397,382,795,786,791,826,791,794,795,794,797,794,399,378,797,406,379,832,775,404,395,790,405,378,801,406,379,436,379,802,379,412,405,380,803,414,379,804,775,408,379,832,773,802,407,396,395,396,397,394,795,408,393,790,405,380,401,1202,413,380,407,380,409,380,411,410,381,410,379,410,413,378,411,380,411,380,413,380,415,390,415,386,417,1178,383,410,413,378,807,776,415,380,805,814,775,804,403,398,787,798,797,796,797,796,799,796,797,794,401,366,817,402,379,796,803,406,395,792,405,398,791,404,395,394,395,792,403,380,401,412,803,376,411,804,773,408,395,792,803,798,405,396,395,396,395,396,795,402,381,796,409,380,799,1202,411,406,379,408,801,776,383,414,809,782,789,822,399,380,799,788,789,824,795,794,795,796,795,796,397,378,795,404,381,832,773,406,395,792,407,398,789,402,379,400,409,804,377,410,407,378,805,414,377,806,775,408,393,794,805,802,403,396,391,380,403,392,795,408,379,836,379,394,793,1200,395,396,393,398,817,780,379,414,811,774,811,784,393,418,789,784,789,826,795,794,795,796,795,794,399,400,789,402,381,798,785,426,379,796,407,396,791,406,395,394,393,794,405,396,395,396,793,406,379,828,773,406,379,828,773,804,403,398,393,398,395,394,793,404,395,790,407,396,397,1184,407,396,397,396,397,394,395,412,405,380,409,380,407,380,411,410,381,410,381,410,413,378,411,380,411,1206,379,410,381,410,787,810,383,380,809,812,773,804,407,396,793,800,799,796,797,796,793,794,795,796,399,378,797,406,379,832,771,408,393,794,407,396,791,404,395,394,395,794,407,396,397,396,791,404,395,792,801,400,379,830,771,800,405,394,395,396,397,396,793,408,395,790,403,380,797,1200,411,406,379,408,805,774,383,414,807,784,789,824,365,416,795,784,791,824,791,796,795,796,795,794,403,366,819,400,379,794,803,404,379,830,377,410,769,408,411,406,379,804,379,412,407,390,805,380,391,828,773,406,393,792,801,800,399,378,399,412,405,380,807,410,377,804,377,412,801,1204,379,406,379,410,805,776,415,376,821,796,795,792,401,400,785,796,799,798,797,796,795,792,795,796,403,380,797,392,415,792,785,392,403,814,399,382,795,392,417,394,375,822,401,380,401,418,783,388,407,792,797,402,365,818,799,798,403,398,393,398,391,380,799,406,381,832,379,394,397,1216,379,394,397,394,399,394,401,392,401,392,403,392,403,392,401,422,373,392,403,424,373,392,403,392,403,1214,379,392,401,394,797,808,405,396,789,800,801,798,401,398,791,796,797,796,795,796,797,794,799,794,367,414,799,390,407,814,757,430,367,816,403,416,765,392,405,416,377,796,407,398,393,398,793,404,379,802,789,430,381,794,785,824,363,416,397,416,355,410,785,432,365,818,403,414,765,1220,379,398,383,422,773,816,383,388,805,812,771,804,405,396,793,798,795,796,797,794,799,798,765,826,401,398,789,400,365,822,801,400,365,822,403,396,789,404,363,424,393,796,403,414,371,392,797,406,381,834,773,404,395,794,797,800,401,398,393};
//This is the code to open the charging port of a tesla, the am650 code.
//uint16_t signal_custom[] ={1500,9175,13444,131,2386,1119,32700,165,294,97,2928,297,98,163,12328,99,794,99,230,97,132,297,164,295,100,491,100,32700,15934,361,132,263,296,559,98,99,98,5343,12282,133,268,199,232,131,132,397,100,32700,12816,197,134,197,332,165,530,1885,13078,197,858,231,824,27849,614,347,454,351,426,383,430,351,434,351,438,381,408,381,440,351,442,349,442,349,442,381,410,379,412,379,1202,381,414,379,414,807,784,393,416,791,786,791,822,361,414,795,818,759,826,793,792,795,798,795,794,401,400,785,400,379,828,771,404,379,830,377,394,791,408,393,398,393,796,405,396,397,394,795,406,395,792,799,404,395,792,799,800,401,382,403,416,357,418,785,418,383,816,385,412,775,1182,409,400,393,398,817,780,385,412,779,808,811,782,391,418,791,784,787,824,793,794,793,794,795,794,401,400,787,402,395,790,801,402,397,788,403,396,791,404,395,394,395,792,403,380,403,410,805,378,411,802,775,406,379,832,771,800,407,396,395,394,397,396,795,406,395,792,405,396,789,1198,395,396,395,398,785,816,387,410,777,810,777,812,389,416,789,784,789,824,795,794,795,794,795,794,401,398,787,402,397,788,801,402,395,788,405,396,791,404,395,396,393,792,405,380,401,410,803,378,411,802,775,410,393,792,803,802,403,366,421,378,403,410,803,378,409,806,377,412,409,1176,415,388,407,388,407,388,409,356,437,358,439,356,437,388,409,388,407,356,439,358,437,388,407,358,437,1176,415,358,437,358,833,774,407,396,791,802,799,796,403,368,819,796,797,794,799,794,795,796,793,798,401,366,819,404,397,786,799,404,397,786,403,398,787,406,395,394,395,794,405,398,395,394,793,406,395,790,803,402,377,798,803,802,401,380,399,410,407,380,803,412,377,804,411,378,803,1202,379,408,379,410,803,778,415,386,815,780,789,790,395,416,793,784,823,792,793,796,795,794,797,794,399,380,795,404,379,802,805,408,393,790,405,396,793,406,395,394,395,792,403,380,401,412,801,380,409,802,773,410,411,802,773,802,405,396,395,396,395,396,791,406,393,794,407,396,791,1198,395,396,393,398,819,782,385,410,781,810,775,812,389,418,789,784,787,824,795,794,795,794,795,796,401,368,817,404,395,788,799,404,397,786,403,398,789,404,395,394,395,792,409,396,393,396,791,404,379,798,807,404,377,798,805,802,405,396,393,396,397,394,793,406,393,794,407,396,395,1184,409,394,397,394,399,394,397,392,401,392,437,356,437,358,437,356,437,358,437,358,437,358,437,358,439,1178,415,358,435,358,833,774,407,398,789,798,797,796,399,380,795,806,797,802,797,798,795,794,797,796,399,378,793,410,393,792,801,406,397,790,405,396,787,404,377,402,409,804,415,358,433,358,831,378,409,768,807,404,379,800,805,804,403,396,393,398,393,396,793,408,395,792,405,398,787,1198,395,396,393,400,817,784,385,412,777,808,809,778,391,418,789,784,819,792,795,794,793,794,797,794,399,378,797,406,409,770,807,406,395,790,407,396,789,408,395,394,393,796,405,398,393,396,791,408,393,794,801,400,377,798,807,802,399,378,403,392,433,358,829,378,393,796,409,394,791,1202,393,396,393,398,817,778,409,384,809,774,811,784,393,418,791,782,823,760,827,796,795,796,793,794,401,368,815,402,377,796,805,404,409,768,409,378,833,378,409,372,409,806,411,378,407,380,805,414,375,806,809,378,409,770,807,802,401,378,437,358,435,358,829,380,393,796,407,398,393,1184,409,396,397,394,397,394,433,360,433,358,435,358,435,358,437,358,437,356,437,358,437,358,439,356,439,1178,413,376,407,380,805,780,409,378,833,774,803,800,405,366,819,800,795,796,795,798,795,798,795,796,401,368,819,402,397,788,799,402,397,786,405,366,821,404,399,390,397,788,405,396,395,394,795,408,395,790,799,404,377,798,805,802,403,366,425,396,395,394,795,406,397,790,403,378,797,1198,409,408,377,408,801,776,415,388,817,778,785,792,431,384,793,786,791,790,825,794,795,796,795,794,399,376,797,408,393,794,803,404,397,788,403,380,795,408,409,374,411,802,411,378,407,378,807,412,377,804,809,376,409,804,775,800,403,380,401,410,407,378,807,412,377,808,411,358,831,1172,395,398,393,398,817,778,383,416,811,774,813,780,391,418,791,784,821,792,797,794,793,794,793,796,401,366,819,404,397,790,801,400,377,796,409,394,791,408,395,396,393,794,403,380,435,378,805,378,409,806,775,406,379,800,805,800,405,396,395,394,397,394,795,406,395,792,405,378,435,1166,415,378,407,380,411,378,413,410,381,408,415,376,415,376,413,380,413,378,413,378,413,378,411,412,379,1206,407,380,405,384,803,814,377,412,811,774,809,780,391,418,791,782,821,792,795,796,793,796,795,794,403,382,797,392,405,782,823,398,369,816,403,368,819,402,397,390,379,800,409,396,395,396,793,406,379,830,773,404,379,830,773,802,405,398,393,396,397,394,795,406,395,790,403,380,799,1202,391,398,411,406,769,808,383,414,805,782,791,790,431,382,795,786,789,824,793,796,795,792,795,796,401,382,799,390,409,792,799,404,397,790,403,398,789,404,395,394,393,794,403,380,401,410,805,378,409,804,775,406,379,802,807,802,403,398,393,396,393,380,831,376,411,800,377,412,803,1170,411,410,385,408,777,806,381,416,781,812,783,786,397,416,793,784,789,822,795,798,795,794,797,794,401,368,817,398,379,796,803,404,379,798,407,412,801,378,393,398,391,796,411,394,397,396,797,406,395,792,801,404,397,788,799,798,403,396,393,398,395,394,793,404,379,796,409,380,435,1168,415,380,407,380,411,380,411,412,381,410,413,378,413,378,411,380,411,380,411,380,413,410,375,426,369,1216,397,394,395,396,785,818,387,410,779,812,777,814,385,384,821,782,785,822,795,794,795,794,793,794,399,378,795,410,393,794,803,404,397,788,405,396,789,406,395,394,395,792,407,396,395,396,793,404,379,798,805,402,381,798,803,804,405,396,393,398,395,394,795,406,395,790,403,380,797,1200,411,406,377,410,803,776,383,412,807,784,787,826,397,368,817,796,795,800,795,794,795,796,795,794,399,380,795,406,379,832,773,404,379,832,377,396,791,408,395,396,391,794,409,394,397,396,795,406,395,794,801,402,397,788,801,798,403,366,423,398,393,398,789,404,395,790,405,396,791,1202,395,396,393,398,817,784,385,410,777,810,811,778,389,410,791,800,797,800,797,796,795,794,797,796,401,382,797,390,407,778,827,400,367,816,401,366,821,402,397,394,395,790,405,396,395,394,793,408,393,792,803,402,377,796,805,804,403,366,421,380,401,410,803,378,409,804,381,394,399,1210,415,358,435,358,437,358,435,358,437,358,437,358,437,358,437,358,437,358,439,356,439,358,437,356,439,1174,417,358,437,356,833,776,405,396,791,800,801,798,401,368,815,798,799,798,797,794,793,796,795,796,403,366,817,404,397,788,799,404,395,788,405,396,791,404,395,394,395,792,403,380,433,378,801,380,409,804,775,410,393,794,803,800,399,380,399,410,405,380,807,380,409,804,411,378,803,1170,411,408,379,410,801,776,415,382,805,788,791,794,431,382,797,784,789,824,793,794,799,794,793,794,401,368,815,402,379,796,805,404,379,798,407,380,831,378,411,406,379,804,411,378,407,378,807,412,377,806,807,376,411,802,773,804,403,398,393,396,397,394,793,406,393,794,407,398,789,1198,397,394,395,396,817,782,385,412,777,804,811,780,391,418,791,784,791,792,825,796,795,794,793,796,399,378,795,410,393,794,801,404,397,788,405,396,789,406,395,394,393,794,403,380,433,378,805,378,409,804,773,412,393,794,803,796,405,398,391,398,395,394,793,406,395,792,403,378,435,1168,413,380,407,380,411,378,413,410,379,410,413,378,413,378,413,378,413,380,413,378,413,378,413,410,385,1212,387,388,419,384,811,782,415,358,835,776,799,800,399,380,795,804,799,802,797,798,793,796,797,794,397,380,793,408,379,832,773,406,395,794,405,396,793,404,397,394,393,794,403,380,401,412,801,378,411,802,773,408,411,802,773,802,403,396,395,396,397,394,793,406,395,790,407,396,791,1200,395,396,393,398,817,780,379,414,811,778,809,782,391,418,789,784,791,826,793,794,795,792,795,796,397,380,795,406,379,832,773,404,379,800,411,394,795,406,395,396,393,796,405,378,403,410,803,410,379,802,775,410,395,792,801,800,401,378,401,410,405,380,805,412,377,806,411,378,803,1206,357,434,379,406,805,774,383,414,807,784,791,822,397,382,795,786,791,826,793,796,795,794,795,792,403,380,799,390,417,790,785,392,409,796,405,396,787,406,393,396,395,794,407,396,395,394,793,408,393,794,801,400,379,796,803,800,403,378,401,412,405,380,805,410,379,804,411,378,407,1202,381,380,411,412,379,410,381,412,413,378,411,378,413,378,413,380,413,380,411,410,381,410,379,412,377,1206,415,396,383,390,807,808,385,388,805,812,773,806,403,378,797,804,799,798,797,798,797,798,797,794,401,368,819,400,377,796,803,404,395,792,405,380,795,410,393,398,391,798,407,382,401,412,803,410,377,806,773,408,395,792,801,798,403,398,393,396,397,394,793,406,395,792,407,396,791,1194,381};
//Horman :
uint16_t signal_custom[] = {10000,64000,9000,64000,64000,45000,12000,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,510,1024,1024,512,1024,512,510,1024,1024,512,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,512,1024,1024,512,512,1024,512,1024,512,1024,512,1024,1024,512,1024,512,510,1024,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,512,1024,512,1024,512,1024,1024,512,1024,512,12000,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,510,1024,1024,512,1024,512,510,1024,1024,512,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,512,1024,1024,512,512,1024,512,1024,512,1024,512,1024,1024,512,1024,512,510,1024,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,512,1024,512,1024,512,1024,1024,512,1024,512,12000,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,510,1024,1024,512,1024,512,510,1024,1024,512,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,512,1024,1024,512,512,1024,512,1024,512,1024,512,1024,1024,512,1024,512,510,1024,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,512,1024,512,1024,512,1024,1024,512,1024,512,12000,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,510,1024,1024,512,1024,512,510,1024,1024,512,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,512,1024,1024,512,512,1024,512,1024,512,1024,512,1024,1024,512,1024,512,510,1024,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,512,1024,512,1024,512,1024,1024,512,1024,512,12000,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,510,1024,1024,512,1024,512,510,1024,1024,512,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,512,1024,1024,512,512,1024,512,1024,512,1024,512,1024,1024,512,1024,512,510,1024,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,512,1024,512,1024,512,1024,1024,512,1024,512,12000,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,510,1024,1024,512,1024,512,510,1024,1024,512,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,512,1024,1024,512,512,1024,512,1024,512,1024,512,1024,1024,512,1024,512,510,1024,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,512,1024,512,1024,512,1024,1024,512,1024,512,12000,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,510,1024,1024,512,1024,512,510,1024,1024,512,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,512,1024,1024,512,512,1024,512,1024,512,1024,512,1024,1024,512,1024,512,510,1024,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,512,1024,512,1024,512,1024,1024,512,1024,512,12000,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,510,1024,1024,512,1024,512,510,1024,1024,512,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,512,1024,1024,512,512,1024,512,1024,512,1024,512,1024,1024,512,1024,512,510,1024,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,512,1024,512,1024,512,1024,1024,512,1024,512,12000,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,510,1024,1024,512,1024,512,510,1024,1024,512,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,512,1024,1024,512,512,1024,512,1024,512,1024,512,1024,1024,512,1024,512,510,1024,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,512,1024,512,1024,512,1024,1024,512,1024,512,12000,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,510,1024,1024,512,1024,512,510,1024,1024,512,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,512,1024,1024,512,512,1024,512,1024,512,1024,512,1024,1024,512,1024,512,510,1024,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,512,1024,512,1024,512,1024,1024,512,1024,512,12000,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,510,1024,1024,512,1024,512,510,1024,1024,512,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,512,1024,1024,512,512,1024,512,1024,512,1024,512,1024,1024,512,1024,512,510,1024,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,512,1024,512,1024,512,1024,1024,512,1024,512,12000,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,510,1024,1024,512,1024,512,510,1024,1024,512,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,512,1024,1024,512,512,1024,512,1024,512,1024,512,1024,1024,512,1024,512,510,1024,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,512,1024,512,1024,512,1024,1024,512,1024,512,12000,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,510,1024,1024,512,1024,512,510,1024,1024,512,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,512,1024,1024,512,512,1024,512,1024,512,1024,512,1024,1024,512,1024,512,510,1024,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,512,1024,512,1024,512,1024,1024,512,1024,512,12000,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,510,1024,1024,512,1024,512,510,1024,1024,512,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,512,1024,1024,512,512,1024,512,1024,512,1024,512,1024,1024,512,1024,512,510,1024,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,512,1024,512,1024,512,1024,1024,512,1024,512,12000,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,510,1024,1024,512,1024,512,510,1024,1024,512,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,512,1024,1024,512,512,1024,512,1024,512,1024,512,1024,1024,512,1024,512,510,1024,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,512,1024,512,1024,512,1024,1024,512,1024,512,12000,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,510,1024,1024,512,1024,512,510,1024,1024,512,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,512,1024,1024,512,512,1024,512,1024,512,1024,512,1024,1024,512,1024,512,510,1024,512,1024,512,1024,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,1024,512,512,1024,512,1024,512,1024,1024,512,1024,512};

//Portail??
//uint16_t signal_custom[] = {10000,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,7475,800,400,800,400,400,800,800,400,29600,400,400,800,800,400,400,800,400,800,800,400,13100,800,400,800,800,400,800,400,400,800,800,400,800,400,800,400,800,400,800,400,800,400,800,400,800,400,800,400,400,800,800,400,800,400,800,400,800,16000,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,8700,400,800,400,400,800,800,400,800,28000,800,400,400,800,800,400,400,800,400,800,800,400,12700,800,400,800,800,400,800,400,400,800,800,400,800,400,800,400,800,400,800,400,800,400,800,400,800,400,800,400,400,800,800,400,800,400,800,400,400,60000,10000,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,7475,800,400,800,400,400,800,800,400,29600,400,400,800,800,400,400,800,400,800,800,400,13100,800,400,800,800,400,800,400,400,800,800,400,800,400,800,400,800,400,800,400,800,400,800,400,800,400,800,400,400,800,800,400,800,400,800,400,800,16000,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,8700,400,800,400,400,800,800,400,800,28000,800,400,400,800,800,400,400,800,400,800,800,400,12700,800,400,800,800,400,800,400,400,800,800,400,800,400,800,400,800,400,800,400,800,400,800,400,800,400,800,400,400,800,800,400,800,400,800,400,400,60000,10000,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,7475,800,400,800,400,400,800,800,400,29600,400,400,800,800,400,400,800,400,800,800,400,13100,800,400,800,800,400,800,400,400,800,800,400,800,400,800,400,800,400,800,400,800,400,800,400,800,400,800,400,400,800,800,400,800,400,800,400,800,16000,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,8700,400,800,400,400,800,800,400,800,28000,800,400,400,800,800,400,400,800,400,800,800,400,12700,800,400,800,800,400,800,400,400,800,800,400,800,400,800,400,800,400,800,400,800,400,800,400,800,400,800,400,400,800,800,400,800,400,800,400,400,800};
int delayus = REPLAYDELAY;
long lastCopyTime = 0;

int trycopy() {
  int i;
  Serial.println("Copying...");
  uint16_t newsignal433[BUFSIZE];
  memset(newsignal433,0,BUFSIZE*sizeof(uint16_t));
  byte n = 0;
  int64_t startus = esp_timer_get_time();
  int64_t startread;
  int64_t dif = 0;
  int64_t ttime = 0;
  for (i = 0; i < BUFSIZE; i++) {
    startread = esp_timer_get_time();
    dif = 0;
    //WAIT FOR INIT
    while (dif < RESET443) {
      dif = esp_timer_get_time() - startread;
      if (CCAvgRead() != n) {
        break;
      }
    }
    if (dif >= RESET443) {
       newsignal433[i] = RESET443;
      //if not started wait...
      if (i == 0) {
        i = -1;
        ttime++;
        if (ttime > WAITFORSIGNAL) {
          Serial.println("No signal detected!");
          ESP.restart();
          return -1;
        }
      }
      else {
        ttime++;
        if (ttime > WAITFORSIGNAL) {
          Serial.println("End of signal detected!");
          break;
        }
        /*
        Serial.println("End of signal!");
        break;*/
      }
    }
    else {
     newsignal433[i] = dif;
     n = !n;
    }
  }
  
  int64_t stopus = esp_timer_get_time();
  Serial.print("Copy took (us): ");
  lastCopyTime = (long)(stopus - startus);
  Serial.println(lastCopyTime , DEC);
  Serial.print("Transitions: ");
  Serial.println(i);
  memcpy(signal433_current,newsignal433,BUFSIZE*sizeof(uint16_t));
  return i;
}

void copy() {
  int i, transitions = 0;
  lastCopyTime = 0;
  CCInit();
  ELECHOUSE_cc1101.setMHZ(used_frequency);
  CCSetRx();
  delay(50);
  //FILTER OUT NOISE SIGNALS (too few transistions or too fast)
  while (transitions < MINIMUM_TRANSITIONS && lastCopyTime < MINIMUM_COPYTIME_US) {
    transitions = trycopy();
    if (SMN_isUpButtonPressed()) ESP.restart();
  }
  //CLEAN LAST ELEMENTS
  for (i=transitions-1;i>0;i--) {
    if (signal433_current[i] == RESET443) signal433_current[i] = 0;
    else break;
  }
  if (BOUND_SAMPLES) {
    signal433_current[0] = 200;
    if (i < BUFSIZE) signal433_current[i+1] = 200;
  }
  
  String fname = "/" + String(pcurrent) +".bin";
  storeSPIFFS(fname.c_str(),signal433_current,BUFSIZE);
  delay(LOOPDELAY);
  ESP.restart();
}



void replay (int t) {
  int i;
  int SIGNALSIZE = sizeof(signal433_current) / sizeof(signal433_current[0]);
  unsigned int totalDelay = 0;
  CCInit();
  ELECHOUSE_cc1101.setMHZ(used_frequency);
  CCSetTx();
  delay(50);
  while (t-- > 0) {
    byte n = 0;
    for (i = 0; i < BUFSIZE; i++) {
      CCWrite(n);
      totalDelay = signal433_current[i]+delayus;
      delayMicroseconds(totalDelay);
      if (signal433_current[i] < RESET443) n = !n;
    }
     CCWrite(0);
  }
  CCSetRx();
  Serial.println("Replay Done");

}


void replay () {
  replay(1);
  ESP.restart();
}

void dump () {
  long ttime = 0;
  int trans = 0;
  int i,j;
  int n = 0;
  Serial.println("Dump transition times: ");
  for (i = 0; i < BUFSIZE; i++) {
    if (signal433_current[i] <= 0) break;
    if (i > 0) Serial.print(",");
    Serial.print(signal433_current[i]);
    ttime += signal433_current[i];
    if (signal433_current[i] != RESET443) {
      n = !n;
      trans++;
    }
  }
  Serial.print("\nTotal time (us): ");
  Serial.println(ttime, DEC);
  Serial.print("Transitions 0/1: ");
  Serial.println(trans, DEC);
  
  Serial.print("Dump raw (");
  Serial.print(DUMP_RAW_MBPS);
  Serial.println("Mbps):");
  
  //n = 0;                                            //This code overflows the serial monitor and hides the actual useful first part, where you get the code array
  //long samples = 0;
  //for (i = 0; i < BUFSIZE; i++) {
    //if (signal433_current[i] <= 0) break;
    //for (j = 0; j < signal433_current[i]*DUMP_RAW_MBPS; j++) {
       //samples++;
       //if (n) Serial.write(124);
       //else Serial.write(46);
       //Serial.flush();
    //}
    //if (signal433_current[i] != RESET443) n = !n;
  //}
  //Serial.print("\nTotal samples: ");
  //Serial.println(samples);
  //SMN_dump(signal433_current,BUFSIZE,RESET443);
 
}


//NEED TO DOUBLE CHECK THIS MATH
void battery() {
  tft.fillScreen(TFT_BLACK);
  tft.drawRect(0, 0, WIDTH-1, HEIGHT-1, TFT_WHITE);
  tft.setFreeFont(FMB9);
  tft.setTextColor(TFT_RED, TFT_WHITE);
  
  String vbat = String((float)( analogRead(4) / 4095.0 * 2 * 3.3 * 1.1));
  SMN_alert("Bat = \n"+vbat+"v",50,750);
  delay(300);
}


//Function that allows the user to set their chosen frequency for each page. The default frequency can be changed in spiffutils.H
void set_frequency () {
  tft.fillScreen(TFT_BLACK);
  tft.drawRect(0, 0, WIDTH-1, HEIGHT-1, TFT_WHITE);
  tft.setFreeFont(FMB18);
  tft.setTextColor(TFT_RED, TFT_WHITE);
  tft.drawString(String(used_frequency),1,50, GFXFF);

  int chose = 0;

  while(true) {   //You can add other frequencies here if you need, or remove some.
    double frequencylist[] = {300.0, 310.0, 315.0, 315.1, 315.4, 315.8, 318.0, 390.0, 433.0, 433.075, 433.330, 433.650, 433.66, 433.80, 433.86, 433.92, 433.94, 434.00, 868.025, 868.3, 868.35, 868.7, 915.0, 915.025, 915.2, 915.5};
    int freq_nb = sizeof(frequencylist) / sizeof(frequencylist[0]);
    if (SMN_isUpButtonPressed()) return;
    if (SMN_isDownButtonPressed()){
      delay(150);
      used_frequency = frequencylist[chose];
      chose +=1;
      tft.drawString(String(used_frequency),1,50 , GFXFF);

      String freqname = "/" + String(pcurrent) +".txt";
      saveFrequency(freqname, used_frequency);
    }
    if (chose >= freq_nb) chose = 0;
  }
}


void custom_signal () {     //This saves the custom code into the current page's code
  tft.fillScreen(TFT_BLACK);
  tft.drawRect(0, 0, WIDTH-1, HEIGHT-1, TFT_WHITE);
  tft.setFreeFont(FMB18);
  tft.setTextColor(TFT_RED, TFT_WHITE);

  int CUSTOMBUFSIZE = sizeof(signal_custom) / sizeof(signal_custom[0]);
  String fname = "/" + String(pcurrent) +".bin";
  storeSPIFFS(fname.c_str(),signal_custom,CUSTOMBUFSIZE);
  tft.drawString(String(CUSTOMBUFSIZE),22,50, GFXFF); //Displays the number of transitions in the custom code
  delay(100);
}

// THIS IS OBVIOUSLY SLOW
void rawout() {
  menuActive = true;
  CCInit();
  CCSetRx();
  delay(50);

  byte b;
  bool endloop = false;
  long t = 0;
  long start = millis();
  while(!endloop) {
    b = CCAvgRead();
    //BOTTLENECK ON SERIAL WRITE... OUT VALUES ARE BOTH ASCII AND EASY TO FILTER IN PULSEVIEW
    if (b) Serial.write(124);
    else Serial.write(46);
    Serial.flush();
    t++;
    if (SMN_isAnyButtonPressed()) {
      endloop = true;
    }
  }
  long tt = millis() - start;
  
  Serial.print("\n Total time(ms): ");
  Serial.print(tt);
  Serial.print("\n Total bits: ");
  Serial.print(t);
  Serial.print("\n bits/sec: ");
  Serial.println((t*1.0)/(tt/1000.0));
  menuActive = false;
  delay(LOOPDELAY);
  ESP.restart();
}



void setup() {
  gpio_hold_dis((gpio_num_t)TFT_BL);
  CCInit();
  ELECHOUSE_cc1101.setMHZ(used_frequency);
  CCSetRx();
  Serial.begin(1000000);
  ////////////// DEFINE THE MENUS ////////////////
  /*
  MAIN
  |-> COPY
  |-> REPLAY
  |-> DUMP
  |-> MONITOR
  |-> More
    |-> Frequency
    |-> Dump
    |-> Rawout
  */

  SimpleMenu *menu_main = new SimpleMenu("Main");
  SimpleMenu *menu_replay = new SimpleMenu("Replay",menu_main,replay);
  SimpleMenu *menu_copy = new SimpleMenu("Copy",menu_main,copy);
  SimpleMenu *menu_dump= new SimpleMenu("Dump",menu_main,dump);
  SimpleMenu *menu_more = new SimpleMenu("More",menu_main,NULL);

  SimpleMenu *menu_frequency = new SimpleMenu("Freq",menu_more,set_frequency);   //Set monitor and frequency next to another to make it easier to find the frequency of the remote
  SimpleMenu *menu_rawout = new SimpleMenu("RawOut",menu_more,rawout);
  SimpleMenu *menu_battery = new SimpleMenu("Battery",menu_more,battery);
  SimpleMenu *menu_customsig = new SimpleMenu("Load",menu_more,custom_signal);

  menu_frequency->displayMenuName = false;
  menu_battery->displayMenuName = false;
  menu_battery->alertDone = false;
  menu_customsig->displayMenuName = false;

  SMN_initMenu(menu_main);
 
  //// ENSURE RADIO OFF (FOR LESS INTERFERENCE?)
  esp_bluedroid_disable();
  esp_bt_controller_disable();
  esp_wifi_stop();
  //adc_power_off();

  if(!SPIFFS.begin(FORMAT_SPIFFS_IF_FAILED)){
    Serial.println("SPIFFS Mount Failed");
    return;
  }

  Serial.println("List SPIFFS:");
  listSPIFFS("/", 1);
  Serial.println("Loading files...");
  
  for (int f=0;f<MAXSIGS;f++) {
    String fname = "/" + String(f) +".bin";
    loadSPIFFS(fname.c_str(),signal433_store[f],BUFSIZE);
  }
  
}


void loop() {
  SMN_loop(); //MUST BE REGULARY CALLED.
  delay(LOOPDELAY);
  signal433_current = signal433_store[pcurrent];

  String freqname = "/" + String(pcurrent) +".txt";
  readFrequency(freqname);

if (SMN_idleMS() > HIBERNATEMS && menuActive == false) {
  SMN_alert("SLEEPING...",100,1000);
  esp_sleep_enable_ext1_wakeup(GPIO_SEL_0, ESP_EXT1_WAKEUP_ALL_LOW);
  //set display goto deep sleep 100uA
  tft.writecommand(0x10);
  digitalWrite(10, HIGH);
  gpio_hold_en((gpio_num_t)TFT_BL);
  esp_sleep_pd_config(ESP_PD_DOMAIN_RTC_PERIPH, ESP_PD_OPTION_AUTO);
  esp_sleep_pd_config(ESP_PD_DOMAIN_RTC_SLOW_MEM, ESP_PD_OPTION_AUTO);
  esp_sleep_pd_config(ESP_PD_DOMAIN_RTC_FAST_MEM, ESP_PD_OPTION_AUTO);
  esp_sleep_pd_config(ESP_PD_DOMAIN_XTAL, ESP_PD_OPTION_AUTO);
  ELECHOUSE_cc1101.goSleep();
  esp_deep_sleep_start();
  }
}
